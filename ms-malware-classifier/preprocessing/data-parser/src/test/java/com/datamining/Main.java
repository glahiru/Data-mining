/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/
package com.datamining;

import com.datamining.preprocessing.ASMNGramImpl;
import com.datamining.utils.CommonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {
    private final static Logger logger = LoggerFactory.getLogger(Main.class);

    public static void main(String[] args) {
        final File file = new File("/Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/asm");
        final String outputPath = "/Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/asm/output";
        final int[] grams = {1,2,3};
        final int bestN = 10;

        if (file.isDirectory()) {
            File[] files = file.listFiles();
            int total = 0;
            for(File asm: files){
                if(asm.getAbsolutePath().endsWith("asm")){
                    total++;
                }
            }
            ExecutorService executorService = Executors.newFixedThreadPool(100);

            final int tFinal = total;
            int completedCount = 0;
            for (final File asm : files) {
                if(asm.getAbsolutePath().endsWith(".asm")) {
                    final int count = completedCount++;
                    for (int i = 0; i < grams.length; i++) {
                        final  int finali=i;
                        executorService.submit(new Thread(){
                            @Override
                            public void run() {
                                String absolutePath = asm.getAbsolutePath();
                                String name = asm.getName();
                                ASMNGramImpl twoGram = new ASMNGramImpl(absolutePath, file.getAbsolutePath() + File.separator + name.split("\\.")[0] + "." + grams[finali] + "gram-best-"+bestN, grams[finali]);
                                twoGram.buildNGram();
                                twoGram.storeBestNCountNGramToCSV(bestN, outputPath);
                                logger.info(count +" files completed out of "+tFinal +" files !");
                            }
                        });
                    }
                }
            }
            executorService.shutdown();
            try {
                executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                logger.error(e.getMessage(),e);
            }
        }


        logger.info("Finished computing n gram files now computing best features ");
        File file1 = new File(outputPath);
        if (file1.isDirectory()) {
            File[] files = file1.listFiles();
            for (int i = 0; i < grams.length; i++) { // we iterate for each gram we want to do the computation
                HashMap<String, Integer> allCount = new HashMap<String, Integer>();
                for(File asm: files){
                    if(asm.getAbsolutePath().endsWith(".csv") && asm.getAbsolutePath().contains(grams[i]+"gram-best-"+bestN)){ // we only take the best csv files
                        try {
                            InputStreamReader fileReader = new InputStreamReader(new FileInputStream(asm));
                            BufferedReader bufferedInputStream = new BufferedReader(fileReader);
                            String line = null;


                            while ((line = bufferedInputStream.readLine()) != null) {
                                if(line.contains(",")){
                                    String[] split = line.split(",");
                                    if(allCount.get(split[0])!=null) {
                                        allCount.put(split[0], allCount.get(split[0]) + Integer.parseInt(split[1]));
                                    }else {
                                        allCount.put(split[0], Integer.parseInt(split[1]));
                                    }
                                }
                            }
                            bufferedInputStream.close();
                            fileReader.close();
                        } catch (FileNotFoundException e) {
                            logger.error(e.getMessage(), e);
                        } catch (IOException e) {
                            logger.error(e.getMessage(), e);
                        }
                    }
                }
                // finished a single gram computation
                CommonUtils.storeFinalBestNCSV(grams[i], bestN, outputPath, allCount);
            }
        }
    }
}
