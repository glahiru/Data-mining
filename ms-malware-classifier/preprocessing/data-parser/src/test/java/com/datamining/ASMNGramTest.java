/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/
package com.datamining;

import com.datamining.preprocessing.ASMNGramImpl;
import com.datamining.preprocessing.NGramCount;
import com.datamining.preprocessing.NGramInstance;
import com.datamining.utils.CommonUtils;
import junit.framework.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.*;

public class ASMNGramTest {
    private final static Logger logger = LoggerFactory.getLogger(ASMNGramTest.class);

    @Test
    public void simpleASMNGramTest() {
        ASMNGramImpl twoGram = new ASMNGramImpl("/Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/0A32eTdBKayjCWhZqDOQ.asm","/tmp/data",2);
        twoGram.buildNGram();
        int count = twoGram.getCountData().getTotal();
        twoGram.storeNGramCount();

        // loading
        ASMNGramImpl test = new ASMNGramImpl("/Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/0A32eTdBKayjCWhZqDOQ.asm", "/tmp/data", 2);
        test.loadNGram();
        Assert.assertEquals(count, test.getCountData().getTotal());
    }

    /*
        This will produce given set of grams in grams int array for each file in the location given in file
        file = /Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/asm
        So you can store all the asm files in this folder and run this code to produce
        one .ngram file for each file
    */
    @Test
    public void allASMNGramTest() {
        File file = new File("/Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/asm");
        int[] grams = {1,2,3};
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File asm : files) {
                if(asm.getAbsolutePath().endsWith(".asm")) {
                    for (int i = 0; i < grams.length; i++) {
                        String absolutePath = asm.getAbsolutePath();
                        String name = asm.getName();
                        ASMNGramImpl twoGram = new ASMNGramImpl(absolutePath, file.getAbsolutePath() + File.separator + name.split("\\.")[0] + "." + grams[i] + "gram", grams[i]);
                        twoGram.buildNGram();
//                        twoGram.storeNGramCount(); // avoid storing serialized objects
                        twoGram.storeNGramToCSV();
                    }
                }
            }
        }
    }

    /*
    This will produce given set of grams in grams int array for each file in the location given in file
    file = /Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/asm
    So you can store all the asm files in this folder and run this code to produce
    one .ngram file for each file
 */
    @Test
    public void allASMNGramWithFinalTest() {
        File file = new File("/Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/asm");
        String outputPath = "/Users/lginnali/masters/data-mining/Data-mining/ms-malware-classifier/data/asm/output";
        int[] grams = {1,2,3};
        int bestN = 10;
        
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            int total = 0;
            for(File asm: files){
                if(asm.getAbsolutePath().endsWith("asm")){
                    total++;
                }
            }
            int completedCount = 0;
            for (File asm : files) {
                if(asm.getAbsolutePath().endsWith(".asm")) {
                    for (int i = 0; i < grams.length; i++) {
                        String absolutePath = asm.getAbsolutePath();
                        String name = asm.getName();
                        ASMNGramImpl twoGram = new ASMNGramImpl(absolutePath, file.getAbsolutePath() + File.separator + name.split("\\.")[0] + "." + grams[i] + "gram-best-"+bestN, grams[i]);
                        twoGram.buildNGram();
//                        twoGram.storeNGramCount(); // avoid storing serialized objects
                        twoGram.storeBestNCountNGramToCSV(bestN, outputPath);
                    }
                    logger.info(completedCount++ +" files completed out of "+total +" files !");
                }
            }
        }

        logger.info("Finished computing n gram files now computing best features ");
        file = new File(outputPath);
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (int i = 0; i < grams.length; i++) { // we iterate for each gram we want to do the computation
                HashMap<String, Integer> allCount = new HashMap<String, Integer>();
                for(File asm: files){
                    if(asm.getAbsolutePath().endsWith(".csv") && asm.getAbsolutePath().contains(grams[i]+"gram-best-"+bestN)){ // we only take the best csv files
                        try {
                            InputStreamReader fileReader = new InputStreamReader(new FileInputStream(asm));
                            BufferedReader bufferedInputStream = new BufferedReader(fileReader);
                            String line = null;


                            while ((line = bufferedInputStream.readLine()) != null) {
                                if(line.contains(",")){
                                    String[] split = line.split(",");
                                    if(allCount.get(split[0])!=null) {
                                        allCount.put(split[0], allCount.get(split[0]) + Integer.parseInt(split[1]));
                                    }else {
                                        allCount.put(split[0], Integer.parseInt(split[1]));
                                    }
                                }
                            }
                            bufferedInputStream.close();
                            fileReader.close();
                        } catch (FileNotFoundException e) {
                            logger.error(e.getMessage(), e);
                        } catch (IOException e) {
                            logger.error(e.getMessage(), e);
                        }
                    }
                }
                // finished a single gram computation
                CommonUtils.storeFinalBestNCSV(grams[i],bestN,outputPath,allCount);
            }
        }
    }


}
