/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/
package com.datamining.preprocessing;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.*;
import java.util.stream.Stream;

public abstract class AbstractFileNGram implements NGram {
    private final static Logger logger = LoggerFactory.getLogger(AbstractFileNGram.class);
    public static final String CSV_EXTENTION = ".csv";

    private NGramCount countData;

    private String outFile;

    public AbstractFileNGram(String outFile) {
        this.outFile = outFile;
    }


    public void storeNGramCount() {
        try
        {
            FileOutputStream fileOut =
                    new FileOutputStream(outFile);
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(countData);
            out.close();
            fileOut.close();
            System.out.println("Serialized data is saved in" + outFile);
        }catch(IOException e) {
            logger.error(e.getMessage(), e);
            e.printStackTrace();
        }
    }

    public void storeNGramToCSV() {
        try
        {
            String[] split = outFile.split("\\.");
            FileWriter outputStreamWriter = new FileWriter(new File(split[0]+"-"+split[1]+ CSV_EXTENTION));
            BufferedWriter bufferedOutputStream = new BufferedWriter(outputStreamWriter);
            Iterator<NGramInstance> iterator = countData.getData().keySet().iterator();
            while(iterator.hasNext()){
                NGramInstance next = iterator.next();
                bufferedOutputStream.write(next.getConcatenatedStr());
                bufferedOutputStream.write(',');
                bufferedOutputStream.write(countData.getData().get(next).toString());
                bufferedOutputStream.write("\n");
            }
            bufferedOutputStream.close();
            outputStreamWriter.close();
        }catch(IOException e) {
            logger.error(e.getMessage(), e);
            e.printStackTrace();
        }
    }

    public void storeBestNCountNGramToCSV(int bestN,String basePath) {
        try {
            if(!new File(basePath).isDirectory()) {
                logger.error("Base path should be a directory and should exists");
                return;
            }
            Integer[] bestNValues = new Integer[bestN];
            String[] split1 = outFile.split(File.separator);
            String[] split = null;
            for (int i = 0; i < split1.length; i++) {
                if(split1[i].contains(".")){
                    split = split1[i].split("\\.");
                }
            }
            if (split == null) {
                logger.error("Please double check your file paths");
                return;
            }
            FileWriter outputStreamWriter = new FileWriter(new File(basePath+File.separator+split[0] + "-" + split[1] + CSV_EXTENTION));
            BufferedWriter bufferedOutputStream = new BufferedWriter(outputStreamWriter);
            Iterator<NGramInstance> iterator = countData.getData().keySet().iterator();
            ArrayList<Integer> integers = new ArrayList<Integer>(countData.getData().values());
            Collections.sort(integers);
            int index = integers.size()-1;

            // constructing best n values
            if(bestN<index) {
                for (int i = 0; i < bestNValues.length; i++) {

                    bestNValues[i] = integers.get(index--);
                }
            }else {
                bestNValues = new Integer[index+1];
                for (int i = 0; i < index; i++) {

                    bestNValues[i] = integers.get(index--);
                }
            }

            List<Integer> bestNList = Arrays.asList(bestNValues);
            while (iterator.hasNext() && bestN >0) {
                NGramInstance next = iterator.next();
                if (bestNList.contains(countData.getData().get(next))){
                    bufferedOutputStream.write(next.getConcatenatedStr());
                    bufferedOutputStream.write(',');
                    bufferedOutputStream.write(countData.getData().get(next).toString());
                    bufferedOutputStream.write("\n");
                    bestN--;
                }
            }
            bufferedOutputStream.close();
            outputStreamWriter.close();
        }catch(IOException e) {
            logger.error(e.getMessage(), e);
            e.printStackTrace();
        }
    }

    public NGramCount loadNGram() {
        try {
            FileInputStream fileIn = new FileInputStream(outFile);
            ObjectInputStream in = new ObjectInputStream(fileIn);
            countData = (NGramCount) in.readObject();
            in.close();
            fileIn.close();
        } catch (IOException i) {
            i.printStackTrace();
        } catch (ClassNotFoundException c) {
            System.out.println("NGramCount class not found");
            c.printStackTrace();
        }
        return countData;
    }

    public NGramCount getCountData() {
        return countData;
    }

    public void setCountData(NGramCount countData) {
        this.countData = countData;
    }

    public String getOutFile() {
        return outFile;
    }
}
