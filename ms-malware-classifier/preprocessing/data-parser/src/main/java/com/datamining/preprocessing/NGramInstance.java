/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/
package com.datamining.preprocessing;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class NGramInstance implements Serializable{
    private final static Logger logger = LoggerFactory.getLogger(NGramInstance.class);

    private List<String> values;

    private int n;

    public NGramInstance(int n) {
        this.n = n;
        values = new ArrayList<String>();
    }

    public void addWord(String word)throws Exception{
        if(values.size()+1>n) {
            throw new Exception("Cannot  add extra words because this is an " + n + "Gram Instance");
        }
        values.add(word);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NGramInstance)) return false;

        NGramInstance that = (NGramInstance) o;

        if (n != that.n) return false;
        if (!values.equals(that.values)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = values.hashCode();
        result = 31 * result + n;
        return result;
    }

    //    @Override
//    public boolean equals(Object o) {
//        if (this == o) return true;
//        if (o == null || getClass() != o.getClass()) return false;
//
//        NGramInstance that = (NGramInstance) o;
//
//        if (n != that.n) return false;
//        if (values != null ? !values.equals(that.values) : that.values != null) return false;
//
//        return true;
//    }
//
//    @Override
//    public int hashCode() {
//        if(n==0) {
//            int result = values != null ? values.hashCode() : 0;
//            result = 31 * result + n;
//            return result;
//        }else {
//            StringBuffer bf = new StringBuffer("");
//            for (String value : values) {
//                bf.append(value);
//            }
//            return bf.hashCode() + n;
//        }
//    }

    public List<String> getValues() {
        return values;
    }

    public int getN() {
        return n;
    }

    public String getConcatenatedStr(){
        if(values.size()==0){
            return null;
        }
        StringBuilder stringBuffer = new StringBuilder();
        for (int i = 0; i < values.size(); i++) {
            stringBuffer.append(values.get(i));
            if(i!=values.size()-1){
                stringBuffer.append("-");
            }
        }
        return stringBuffer.toString();
    }
}
