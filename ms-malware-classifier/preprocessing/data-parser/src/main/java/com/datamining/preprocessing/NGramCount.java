/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/
package com.datamining.preprocessing;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

public class NGramCount implements Serializable {
    private final static Logger logger = LoggerFactory.getLogger(NGramCount.class);


    private Map<NGramInstance,Integer> data;

    private int n;

    public NGramCount(int n) {
        data = new HashMap<NGramInstance, Integer>();
        this.n = n;
    }

    public void increment(NGramInstance instance) {
        if(!data.containsKey(instance)) {
            data.put(instance, 1);
        }else {
            data.put(instance,data.get(instance)+1);
        }
    }

    public int getTotal(){
        return data.size();
    }

    public int getN() {
        return n;
    }

    public void setN(int n) {
        this.n = n;
    }

    public Map<NGramInstance, Integer> getData() {
        return data;
    }

    public void setData(Map<NGramInstance, Integer> data) {
        this.data = data;
    }
}
